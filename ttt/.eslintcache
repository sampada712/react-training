[{"C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\index.tsx":"1","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\reportWebVitals.ts":"2","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\App.tsx":"3","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\TicTacToeGame.tsx":"4","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\TicTacToeBoard.tsx":"5","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\TicTacToeCell.tsx":"6","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\services\\TicTacToe.ts":"7"},{"size":511,"mtime":1607067783899,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":223,"mtime":1608544213364,"results":"11","hashOfConfig":"9"},{"size":2789,"mtime":1608547255377,"results":"12","hashOfConfig":"9"},{"size":1848,"mtime":1608546448166,"results":"13","hashOfConfig":"9"},{"size":863,"mtime":1608546782199,"results":"14","hashOfConfig":"9"},{"size":1877,"mtime":1608545166894,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1frzyxi",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\index.tsx",[],["35","36"],"C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\reportWebVitals.ts",[],"C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\App.tsx",["37"],"import React from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport Game from './TicTacToeGame'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\TicTacToeGame.tsx",[],"C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\TicTacToeBoard.tsx",["38","39"],"import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport Cell from './TicTacToeCell'\r\n\r\nlet boardStyle={\r\n    maxWidth:\"250px\"\r\n}\r\n\r\ninterface BoardProps{\r\n    cells:String[];\r\n    onCellClick(cellId:number):void;\r\n    winningMoves:number[]|null;\r\n    over:boolean;\r\n}\r\n\r\nexport default (props:BoardProps)=>{\r\n    let onCellClick = props.onCellClick;\r\n    let cells = props.cells;\r\n    let over = props.over;\r\n    let winningMoves = props.winningMoves;\r\n    return (\r\n        <div style={boardStyle} className='container'>\r\n            <div className='row'>\r\n                <Cell over={over} winningMoves={winningMoves} id={0} cellClicked={()=>onCellClick(0)} value={cells[0]}/>\r\n                <Cell over={over} winningMoves={winningMoves} id={1} cellClicked={()=>onCellClick(1)} value={cells[1]}/>\r\n                <Cell over={over} winningMoves={winningMoves} id={2} cellClicked={()=>onCellClick(2)} value={cells[2]}/>\r\n            </div>\r\n            <div className='row'>\r\n                <Cell over={over} winningMoves={winningMoves} id={3} cellClicked={()=>onCellClick(3)} value={cells[3]}/>\r\n                <Cell over={over} winningMoves={winningMoves} id={4} cellClicked={()=>onCellClick(4)} value={cells[4]}/>\r\n                <Cell over={over} winningMoves={winningMoves} id={5} cellClicked={()=>onCellClick(5)} value={cells[5]}/>\r\n            </div>\r\n            <div className='row'>\r\n                <Cell over={over} winningMoves={winningMoves} id={6} cellClicked={()=>onCellClick(6)} value={cells[6]}/>\r\n                <Cell over={over} winningMoves={winningMoves} id={7} cellClicked={()=>onCellClick(7)} value={cells[7]}/>\r\n                <Cell over={over} winningMoves={winningMoves} id={8} cellClicked={()=>onCellClick(8)} value={cells[8]}/>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\n","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\components\\TicTacToeCell.tsx",["40"],"import React from 'react';\r\n\r\ninterface CellProps{\r\n    value:String;\r\n    cellClicked:()=>void;\r\n    winningMoves:number[]|null;\r\n    over:boolean;\r\n    id:number;\r\n}\r\n\r\nexport default ({value,cellClicked,over,winningMoves,id}:CellProps)=>{\r\n    let cellStyle={\r\n        background: value||over?'#EEE':'white',\r\n        cursor:value||over?'not-allowed':'pointer'\r\n    }\r\n    let handler = value||over?(()=>{console.log('You cant click here')}):cellClicked\r\n    const disabled = value?true:false;\r\n    if(winningMoves ){\r\n        let [a,b,c]=winningMoves;\r\n        if(id===a || id===b || id===c)\r\n            cellStyle.background='lightgreen';\r\n    }\r\n    return (\r\n        <button disabled={disabled} \r\n                style={cellStyle} \r\n                onClick={handler}\r\n                className='cell'>\r\n                {value}\r\n        </button>\r\n    );\r\n}","C:\\git\\ReactTraining\\MyWork\\react-training\\ttt\\src\\services\\TicTacToe.ts",["41","42","43"],"import { chdir } from \"process\";\r\nimport { checkServerIdentity } from \"tls\";\r\n\r\nexport default class TicTacToe{\r\n    private _cells:string[];\r\n    private _next:string = 'O';\r\n    private _winner:string|null=null;\r\n    private _winningMoves:number[]|null=null;\r\n    private _moveCount:number=0;\r\n\r\n    constructor(){\r\n        this._cells=[\r\n        '',  '',   '',\r\n        '',  '',   '',\r\n        '',  '',   ''\r\n        ];\r\n    }\r\n\r\n    get gameOver(){\r\n        return this._moveCount==9||this._winner;\r\n    }\r\n\r\n    get winner(){\r\n        return this._winner;\r\n    }\r\n\r\n    get cells(){\r\n        return this._cells;\r\n    }\r\n\r\n    get next(){\r\n        return this._next;\r\n    }\r\n\r\n    get winningMoves(){\r\n        return this._winningMoves;\r\n    }\r\n\r\n    move(pos:number){\r\n        //if game is over or current cell is occupied\r\n        if(this.gameOver || this._cells[pos]){\r\n            return false;\r\n        }\r\n        this._cells[pos]=this._next;\r\n        this._next=this._next==='O'?'X':'O';\r\n        this._moveCount++;\r\n        this.check();\r\n        return true;\r\n    }\r\n\r\n    check(){\r\n        let winningMovesList:number[][]=[\r\n            //rows\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n\r\n            //columns\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n\r\n            //diagnol\r\n            [0,4,8],\r\n            [2,4,6]\r\n        ]\r\n        for(let winningMoves of winningMovesList){\r\n            //winningMoves is an array of 3 number\r\n            let [a,b,c] = winningMoves; //array destructuring\r\n\r\n            let cells=this._cells;\r\n\r\n            if(cells[a]!=='' && cells[a]===cells[b] && cells[a]===cells[c]){\r\n                this._winner=cells[a];\r\n                this._winningMoves=winningMoves;\r\n                return winningMoves;            \r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n}",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":12},{"ruleId":"48","severity":1,"message":"52","line":1,"column":10,"nodeType":"50","messageId":"51","endLine":1,"endColumn":16},{"ruleId":"53","severity":1,"message":"54","line":16,"column":1,"nodeType":"55","endLine":40,"endColumn":2},{"ruleId":"53","severity":1,"message":"54","line":11,"column":1,"nodeType":"55","endLine":31,"endColumn":2},{"ruleId":"48","severity":1,"message":"56","line":1,"column":10,"nodeType":"50","messageId":"51","endLine":1,"endColumn":15},{"ruleId":"48","severity":1,"message":"57","line":2,"column":10,"nodeType":"50","messageId":"51","endLine":2,"endColumn":29},{"ruleId":"58","severity":1,"message":"59","line":20,"column":31,"nodeType":"60","messageId":"61","endLine":20,"endColumn":33},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'chdir' is defined but never used.","'checkServerIdentity' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]